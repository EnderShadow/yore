mod decoder;
mod encoder;
use std::{
    fs::File,
    io::{BufWriter, Write},
};

use codegen::Scope;

use crate::UnicodeMapping;
use anyhow::Result;

use self::{
    decoder::{build_complete_decode_table, build_incomplete_decode_table},
    encoder::build_encoder_internal,
};

pub fn generate_coder(name: &str, definition: UnicodeMapping) -> Result<()> {
    let file_path = format!("../src/code_pages/{}.rs", name.to_lowercase());
    let mut file = BufWriter::new(File::create(file_path)?);
    let code = generate_code(name, definition)?;
    file.write_all(format_code(&code)?.as_bytes())?;
    Ok(())
}

pub fn generate_code(name: &str, definition: UnicodeMapping) -> Result<String> {
    let mut coder = Scope::new();
    coder.push_impl(build_encoder_internal(name, &definition));

    let is_complete = definition.iter().flatten().count() == 256;

    let template = if is_complete {
        include_str!("codegen_helper/templates/complete.rs")
    } else {
        include_str!("codegen_helper/templates/incomplete.rs")
    };

    let table = if is_complete {
        build_complete_decode_table(definition)
    } else {
        build_incomplete_decode_table(definition)
    };

    let is_non_ascii = definition
        .iter()
        .take(128)
        .filter_map(|c| *c)
        .any(|c| !c.is_ascii());

    let decode_helper_name = if is_non_ascii {
        "decode_helper_non_ascii"
    } else {
        "decode_helper"
    };

    let code = format!(
        "//! Code autogenerated from <https://unicode.org/Public/MAPPINGS/VENDORS/>\n\
         //! See binary codegen crate\n\
         {}\n\
         {}",
        template
            .replace("PLACEHOLDER_TABLE", &table)
            .replace("CODERSTRUCT", name)
            .replace("decode_helper", decode_helper_name),
        coder.to_string(),
    );

    Ok(code)
}

fn format_code(value: &str) -> Result<String> {
    let syntax_tree = syn::parse_file(value)?;
    Ok(prettyplease::unparse(&syntax_tree))
}
